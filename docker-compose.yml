services:
  backend:
    build: backend
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  csr:
    build: csr
    ports:
      - "4201:80"
    depends_on:
      db:
        condition: service_healthy

  ssr:
    build: ssr
    ports:
      - "4202:4000"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  metrics:
    build: metrics
    ports:
      - "3001:3001"
    volumes:
      - ./metrics/metrics.db:/src/app/db/metrics.db

  chrome:
    image: browserless/chrome
    ports:
      - "9222:3000"
    environment:
      - DEFAULT_BLOCK_ADS=true
      - DEFAULT_HEADLESS=true
      - DEFAULT_IGNORE_HTTPS_ERRORS=true

  lighthouse:
    build: lighthouse
    depends_on:
      - csr
      - ssr
      - chrome
    environment:
      - HOST_OS=${HOST_OS}
      - TARGET_URL=${TARGET_URL}
      - METRICS_API=${METRICS_API}
    profiles: ["tests"]
    entrypoint: ["sh", "-c", "while true; do sleep 1000; done"]

volumes:
  postgres_data:
